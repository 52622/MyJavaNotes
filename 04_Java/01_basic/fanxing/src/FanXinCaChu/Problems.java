/**
 * Copyright (C), 2015-2019, XXX有限公司
 * FileName: Problems
 * Author:   copywang
 * Date:     2019/3/5 17:14
 * Description: 泛型问题
 * History:
 * <author>          <time>          <version>          <desc>
 * 作者姓名           修改时间           版本号              描述
 */
package FanXinCaChu;

import java.util.ArrayList;
import java.util.List;

public class Problems {

  public static void main(String[] args) {
    // eg1 不支持泛型数组
//  List<Integer>[] arrayOfLists = new List<Integer>[2]; //Generic array creation
    // eg1.1 字符串数组不能存Integer
    Object[] strings = new String[2];
    strings[0] = "hi";   // OK
//    strings[1] = 100;    // java.lang.ArrayStoreException: java.lang.Integer
    //eg1.2
    /**
     假设我们支持泛型数组的创建，由于运行时期类型信息已经被擦除，JVM实际上根本就不知道new ArrayList<String>()和new ArrayList<Integer>()的区别

     Object[] stringLists = new List<String>[];  // compiler error, but pretend it's allowed
     stringLists[0] = new ArrayList<String>();   // OK
     stringLists[1] = new ArrayList<Integer>(); // An ArrayStoreException should be thrown, but the runtime can't detect it.
     Class c1 = new ArrayList<String>().getClass();
     Class c2 = new ArrayList<Integer>().getClass();
     System.out.println(c1 == c2); // true
     */

    // eg2 Bridge method 编译时自动加上的方法,运行时出现ClassCastException异常
    MyNode mn = new MyNode(5);
    Node n = mn; // A raw type - compiler throws an unchecked warning
    n.setData("Hello"); // Causes a ClassCastException to be thrown.
    // Integer x = mn.data;
    /**
     class MyNode extends Node {
     // Bridge method generated by the compiler
     public void setData(Object data) {
     setData((Integer) data); // 实际调用的是这个方法，而不是Node的setData(Object data)
     }
     public void setData(Integer data) {
     System.out.println("MyNode.setData");
     super.setData(data);
     }
     // ...
     }
     */

    // eg3 调用实例
    List<String> ls = new ArrayList<>();
    try {
      append(ls, String.class);
    } catch (Exception e) {
      e.printStackTrace();
    }

  }
  //eg3 类型参数创建实例()
  // 错误的例子
  /**
   public static <E> void append(List<E> list) {
   E elem = new E();  // compile-time error
   list.add(elem);
   }
   */
  // 正确的写法-反射
  public static <E> void append(List<E> list, Class<E> cls) throws Exception {
    E elem = cls.newInstance();   // OK
    list.add(elem);
  }

  // eg4 无法对泛型代码直接使用instanceof关键字
  // JVM在运行时期无法识别出ArrayList<Integer>和ArrayList<String>的之间的区别
  /**
  public static <E> void rtti(List<E> list) {
    if (list instanceof ArrayList<Integer>) {  // compile-time error
      // ...
    }
  }
   */
  //使用通配符重新设置bounds
  public static void rtti(List<?> list) {
    if (list instanceof ArrayList<?>) {  // OK; instanceof requires a reifiable type
      // ...
    }
  }
}
